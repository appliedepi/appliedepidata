% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_data.R
\name{get_data}
\alias{get_data}
\title{Retrieve and Load Datasets}
\usage{
get_data(
  name = NULL,
  language = NULL,
  group_identifier = NULL,
  usage = NULL,
  unique_identifier = NULL
)
}
\arguments{
\item{name}{(optional) A string specifying the name of the dataset to load.}

\item{language}{(optional) A string specifying the language of the dataset.
If used with \code{name}, \code{group_identifier}, or \code{unique_identifier}, the function
will filter datasets based on this language.}

\item{group_identifier}{(optional) A string identifying a group of related
datasets. If provided, the function will return all datasets within the group
unless further criteria are given.}

\item{usage}{(optional) A string representing where the datasets are used.
If provided, the function will return all datasets within the group unless
further criteria are given.}

\item{unique_identifier}{(optional) A string representing the unique identifier
for a dataset.}
}
\value{
The dataset(s) are loaded into the global environment. Depending on the
structure #' of the dataset, it could be a data frame, spatial object, or
individual list elements loaded as separate objects.
}
\description{
The \code{get_data} function is designed to load specific datasets from the
\code{appliedepidata} package based on search criteria such as \code{name}, \code{language},
\code{group_identifier}, or \code{unique_identifier}. The function performs an internal
lookup to identify the appropriate dataset(s), then loads and assigns them into
the global environment.

Depending on the type of dataset (e.g., regular data frame, spatial data (\code{sf}),
or list), appropriate post-processing is done to ensure proper handling and
loading.
}
\details{
The function operates as follows:
\enumerate{
\item \strong{Dataset Lookup:} It performs an internal lookup to identify datasets
matching the search criteria provided.
\item \strong{Loading Datasets:} For each dataset found:
\itemize{
\item It attempts to load the dataset using the \code{data()} function from
the \code{appliedepidata} package.
\item The dataset is loaded into a temporary environment to avoid global
environment clutter during the loading process.
}
\item \strong{Post-Processing Based on Object Type:} Once the dataset is loaded,
the function checks the type of object and handles it accordingly:
\itemize{
\item \strong{Data frames} are directly assigned to the global environment without
any further processing.
\item \strong{Phylo objects} (\code{phylo} class) are directly assigned to the global
environment without any further processing.
\item \strong{Stars objects} (\code{stars} class) are directly assigned to the global
environment without any further processing.
\item \strong{Spatial objects} (\code{sf} class) are processed using \code{sf::st_as_sf()} to
ensure correct handling of spatial data, and then assigned to the global
environment.
\item \strong{Lists} that are not data frames are split into individual objects and
assigned to the global environment as separate entities.
}
}

If any dataset cannot be found or loaded, the function will raise an error.
}
\examples{
\dontrun{
# Load a dataset by name
get_data(name = "AJS_AmTiman")

# Load a dataset by name and language
get_data(name = "AJS_AmTiman", language = "en")

# Load datasets by group identifier
get_data(group_identifier = "acutejaundicesyndrome_outbreak_tcd_2016")

}

}
\seealso{
\code{appliedepidata::search_data()} for details on finding datasets and their criteria.
}
